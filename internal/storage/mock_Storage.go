// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package storage

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/systemli/ticker/internal/api/pagination"
	"gorm.io/gorm"
)

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// AddTickerUser provides a mock function for the type MockStorage
func (_mock *MockStorage) AddTickerUser(ticker *Ticker, user *User) error {
	ret := _mock.Called(ticker, user)

	if len(ret) == 0 {
		panic("no return value specified for AddTickerUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*Ticker, *User) error); ok {
		r0 = returnFunc(ticker, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_AddTickerUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTickerUser'
type MockStorage_AddTickerUser_Call struct {
	*mock.Call
}

// AddTickerUser is a helper method to define mock.On call
//   - ticker *Ticker
//   - user *User
func (_e *MockStorage_Expecter) AddTickerUser(ticker interface{}, user interface{}) *MockStorage_AddTickerUser_Call {
	return &MockStorage_AddTickerUser_Call{Call: _e.mock.On("AddTickerUser", ticker, user)}
}

func (_c *MockStorage_AddTickerUser_Call) Run(run func(ticker *Ticker, user *User)) *MockStorage_AddTickerUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Ticker
		if args[0] != nil {
			arg0 = args[0].(*Ticker)
		}
		var arg1 *User
		if args[1] != nil {
			arg1 = args[1].(*User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_AddTickerUser_Call) Return(err error) *MockStorage_AddTickerUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_AddTickerUser_Call) RunAndReturn(run func(ticker *Ticker, user *User) error) *MockStorage_AddTickerUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBluesky provides a mock function for the type MockStorage
func (_mock *MockStorage) DeleteBluesky(ticker *Ticker) error {
	ret := _mock.Called(ticker)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBluesky")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*Ticker) error); ok {
		r0 = returnFunc(ticker)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_DeleteBluesky_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBluesky'
type MockStorage_DeleteBluesky_Call struct {
	*mock.Call
}

// DeleteBluesky is a helper method to define mock.On call
//   - ticker *Ticker
func (_e *MockStorage_Expecter) DeleteBluesky(ticker interface{}) *MockStorage_DeleteBluesky_Call {
	return &MockStorage_DeleteBluesky_Call{Call: _e.mock.On("DeleteBluesky", ticker)}
}

func (_c *MockStorage_DeleteBluesky_Call) Run(run func(ticker *Ticker)) *MockStorage_DeleteBluesky_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Ticker
		if args[0] != nil {
			arg0 = args[0].(*Ticker)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_DeleteBluesky_Call) Return(err error) *MockStorage_DeleteBluesky_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_DeleteBluesky_Call) RunAndReturn(run func(ticker *Ticker) error) *MockStorage_DeleteBluesky_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteIntegrations provides a mock function for the type MockStorage
func (_mock *MockStorage) DeleteIntegrations(ticker *Ticker) error {
	ret := _mock.Called(ticker)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIntegrations")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*Ticker) error); ok {
		r0 = returnFunc(ticker)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_DeleteIntegrations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIntegrations'
type MockStorage_DeleteIntegrations_Call struct {
	*mock.Call
}

// DeleteIntegrations is a helper method to define mock.On call
//   - ticker *Ticker
func (_e *MockStorage_Expecter) DeleteIntegrations(ticker interface{}) *MockStorage_DeleteIntegrations_Call {
	return &MockStorage_DeleteIntegrations_Call{Call: _e.mock.On("DeleteIntegrations", ticker)}
}

func (_c *MockStorage_DeleteIntegrations_Call) Run(run func(ticker *Ticker)) *MockStorage_DeleteIntegrations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Ticker
		if args[0] != nil {
			arg0 = args[0].(*Ticker)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_DeleteIntegrations_Call) Return(err error) *MockStorage_DeleteIntegrations_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_DeleteIntegrations_Call) RunAndReturn(run func(ticker *Ticker) error) *MockStorage_DeleteIntegrations_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMastodon provides a mock function for the type MockStorage
func (_mock *MockStorage) DeleteMastodon(ticker *Ticker) error {
	ret := _mock.Called(ticker)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMastodon")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*Ticker) error); ok {
		r0 = returnFunc(ticker)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_DeleteMastodon_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMastodon'
type MockStorage_DeleteMastodon_Call struct {
	*mock.Call
}

// DeleteMastodon is a helper method to define mock.On call
//   - ticker *Ticker
func (_e *MockStorage_Expecter) DeleteMastodon(ticker interface{}) *MockStorage_DeleteMastodon_Call {
	return &MockStorage_DeleteMastodon_Call{Call: _e.mock.On("DeleteMastodon", ticker)}
}

func (_c *MockStorage_DeleteMastodon_Call) Run(run func(ticker *Ticker)) *MockStorage_DeleteMastodon_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Ticker
		if args[0] != nil {
			arg0 = args[0].(*Ticker)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_DeleteMastodon_Call) Return(err error) *MockStorage_DeleteMastodon_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_DeleteMastodon_Call) RunAndReturn(run func(ticker *Ticker) error) *MockStorage_DeleteMastodon_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMessage provides a mock function for the type MockStorage
func (_mock *MockStorage) DeleteMessage(message Message) error {
	ret := _mock.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMessage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(Message) error); ok {
		r0 = returnFunc(message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_DeleteMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMessage'
type MockStorage_DeleteMessage_Call struct {
	*mock.Call
}

// DeleteMessage is a helper method to define mock.On call
//   - message Message
func (_e *MockStorage_Expecter) DeleteMessage(message interface{}) *MockStorage_DeleteMessage_Call {
	return &MockStorage_DeleteMessage_Call{Call: _e.mock.On("DeleteMessage", message)}
}

func (_c *MockStorage_DeleteMessage_Call) Run(run func(message Message)) *MockStorage_DeleteMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 Message
		if args[0] != nil {
			arg0 = args[0].(Message)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_DeleteMessage_Call) Return(err error) *MockStorage_DeleteMessage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_DeleteMessage_Call) RunAndReturn(run func(message Message) error) *MockStorage_DeleteMessage_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMessages provides a mock function for the type MockStorage
func (_mock *MockStorage) DeleteMessages(ticker *Ticker) error {
	ret := _mock.Called(ticker)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMessages")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*Ticker) error); ok {
		r0 = returnFunc(ticker)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_DeleteMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMessages'
type MockStorage_DeleteMessages_Call struct {
	*mock.Call
}

// DeleteMessages is a helper method to define mock.On call
//   - ticker *Ticker
func (_e *MockStorage_Expecter) DeleteMessages(ticker interface{}) *MockStorage_DeleteMessages_Call {
	return &MockStorage_DeleteMessages_Call{Call: _e.mock.On("DeleteMessages", ticker)}
}

func (_c *MockStorage_DeleteMessages_Call) Run(run func(ticker *Ticker)) *MockStorage_DeleteMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Ticker
		if args[0] != nil {
			arg0 = args[0].(*Ticker)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_DeleteMessages_Call) Return(err error) *MockStorage_DeleteMessages_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_DeleteMessages_Call) RunAndReturn(run func(ticker *Ticker) error) *MockStorage_DeleteMessages_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSignalGroup provides a mock function for the type MockStorage
func (_mock *MockStorage) DeleteSignalGroup(ticker *Ticker) error {
	ret := _mock.Called(ticker)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSignalGroup")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*Ticker) error); ok {
		r0 = returnFunc(ticker)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_DeleteSignalGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSignalGroup'
type MockStorage_DeleteSignalGroup_Call struct {
	*mock.Call
}

// DeleteSignalGroup is a helper method to define mock.On call
//   - ticker *Ticker
func (_e *MockStorage_Expecter) DeleteSignalGroup(ticker interface{}) *MockStorage_DeleteSignalGroup_Call {
	return &MockStorage_DeleteSignalGroup_Call{Call: _e.mock.On("DeleteSignalGroup", ticker)}
}

func (_c *MockStorage_DeleteSignalGroup_Call) Run(run func(ticker *Ticker)) *MockStorage_DeleteSignalGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Ticker
		if args[0] != nil {
			arg0 = args[0].(*Ticker)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_DeleteSignalGroup_Call) Return(err error) *MockStorage_DeleteSignalGroup_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_DeleteSignalGroup_Call) RunAndReturn(run func(ticker *Ticker) error) *MockStorage_DeleteSignalGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTelegram provides a mock function for the type MockStorage
func (_mock *MockStorage) DeleteTelegram(ticker *Ticker) error {
	ret := _mock.Called(ticker)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTelegram")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*Ticker) error); ok {
		r0 = returnFunc(ticker)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_DeleteTelegram_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTelegram'
type MockStorage_DeleteTelegram_Call struct {
	*mock.Call
}

// DeleteTelegram is a helper method to define mock.On call
//   - ticker *Ticker
func (_e *MockStorage_Expecter) DeleteTelegram(ticker interface{}) *MockStorage_DeleteTelegram_Call {
	return &MockStorage_DeleteTelegram_Call{Call: _e.mock.On("DeleteTelegram", ticker)}
}

func (_c *MockStorage_DeleteTelegram_Call) Run(run func(ticker *Ticker)) *MockStorage_DeleteTelegram_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Ticker
		if args[0] != nil {
			arg0 = args[0].(*Ticker)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_DeleteTelegram_Call) Return(err error) *MockStorage_DeleteTelegram_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_DeleteTelegram_Call) RunAndReturn(run func(ticker *Ticker) error) *MockStorage_DeleteTelegram_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTicker provides a mock function for the type MockStorage
func (_mock *MockStorage) DeleteTicker(ticker *Ticker) error {
	ret := _mock.Called(ticker)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTicker")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*Ticker) error); ok {
		r0 = returnFunc(ticker)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_DeleteTicker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTicker'
type MockStorage_DeleteTicker_Call struct {
	*mock.Call
}

// DeleteTicker is a helper method to define mock.On call
//   - ticker *Ticker
func (_e *MockStorage_Expecter) DeleteTicker(ticker interface{}) *MockStorage_DeleteTicker_Call {
	return &MockStorage_DeleteTicker_Call{Call: _e.mock.On("DeleteTicker", ticker)}
}

func (_c *MockStorage_DeleteTicker_Call) Run(run func(ticker *Ticker)) *MockStorage_DeleteTicker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Ticker
		if args[0] != nil {
			arg0 = args[0].(*Ticker)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_DeleteTicker_Call) Return(err error) *MockStorage_DeleteTicker_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_DeleteTicker_Call) RunAndReturn(run func(ticker *Ticker) error) *MockStorage_DeleteTicker_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTickerUser provides a mock function for the type MockStorage
func (_mock *MockStorage) DeleteTickerUser(ticker *Ticker, user *User) error {
	ret := _mock.Called(ticker, user)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTickerUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*Ticker, *User) error); ok {
		r0 = returnFunc(ticker, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_DeleteTickerUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTickerUser'
type MockStorage_DeleteTickerUser_Call struct {
	*mock.Call
}

// DeleteTickerUser is a helper method to define mock.On call
//   - ticker *Ticker
//   - user *User
func (_e *MockStorage_Expecter) DeleteTickerUser(ticker interface{}, user interface{}) *MockStorage_DeleteTickerUser_Call {
	return &MockStorage_DeleteTickerUser_Call{Call: _e.mock.On("DeleteTickerUser", ticker, user)}
}

func (_c *MockStorage_DeleteTickerUser_Call) Run(run func(ticker *Ticker, user *User)) *MockStorage_DeleteTickerUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Ticker
		if args[0] != nil {
			arg0 = args[0].(*Ticker)
		}
		var arg1 *User
		if args[1] != nil {
			arg1 = args[1].(*User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_DeleteTickerUser_Call) Return(err error) *MockStorage_DeleteTickerUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_DeleteTickerUser_Call) RunAndReturn(run func(ticker *Ticker, user *User) error) *MockStorage_DeleteTickerUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTickerUsers provides a mock function for the type MockStorage
func (_mock *MockStorage) DeleteTickerUsers(ticker *Ticker) error {
	ret := _mock.Called(ticker)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTickerUsers")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*Ticker) error); ok {
		r0 = returnFunc(ticker)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_DeleteTickerUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTickerUsers'
type MockStorage_DeleteTickerUsers_Call struct {
	*mock.Call
}

// DeleteTickerUsers is a helper method to define mock.On call
//   - ticker *Ticker
func (_e *MockStorage_Expecter) DeleteTickerUsers(ticker interface{}) *MockStorage_DeleteTickerUsers_Call {
	return &MockStorage_DeleteTickerUsers_Call{Call: _e.mock.On("DeleteTickerUsers", ticker)}
}

func (_c *MockStorage_DeleteTickerUsers_Call) Run(run func(ticker *Ticker)) *MockStorage_DeleteTickerUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Ticker
		if args[0] != nil {
			arg0 = args[0].(*Ticker)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_DeleteTickerUsers_Call) Return(err error) *MockStorage_DeleteTickerUsers_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_DeleteTickerUsers_Call) RunAndReturn(run func(ticker *Ticker) error) *MockStorage_DeleteTickerUsers_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTickerWebsites provides a mock function for the type MockStorage
func (_mock *MockStorage) DeleteTickerWebsites(ticker *Ticker) error {
	ret := _mock.Called(ticker)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTickerWebsites")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*Ticker) error); ok {
		r0 = returnFunc(ticker)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_DeleteTickerWebsites_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTickerWebsites'
type MockStorage_DeleteTickerWebsites_Call struct {
	*mock.Call
}

// DeleteTickerWebsites is a helper method to define mock.On call
//   - ticker *Ticker
func (_e *MockStorage_Expecter) DeleteTickerWebsites(ticker interface{}) *MockStorage_DeleteTickerWebsites_Call {
	return &MockStorage_DeleteTickerWebsites_Call{Call: _e.mock.On("DeleteTickerWebsites", ticker)}
}

func (_c *MockStorage_DeleteTickerWebsites_Call) Run(run func(ticker *Ticker)) *MockStorage_DeleteTickerWebsites_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Ticker
		if args[0] != nil {
			arg0 = args[0].(*Ticker)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_DeleteTickerWebsites_Call) Return(err error) *MockStorage_DeleteTickerWebsites_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_DeleteTickerWebsites_Call) RunAndReturn(run func(ticker *Ticker) error) *MockStorage_DeleteTickerWebsites_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUpload provides a mock function for the type MockStorage
func (_mock *MockStorage) DeleteUpload(upload Upload) error {
	ret := _mock.Called(upload)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUpload")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(Upload) error); ok {
		r0 = returnFunc(upload)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_DeleteUpload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUpload'
type MockStorage_DeleteUpload_Call struct {
	*mock.Call
}

// DeleteUpload is a helper method to define mock.On call
//   - upload Upload
func (_e *MockStorage_Expecter) DeleteUpload(upload interface{}) *MockStorage_DeleteUpload_Call {
	return &MockStorage_DeleteUpload_Call{Call: _e.mock.On("DeleteUpload", upload)}
}

func (_c *MockStorage_DeleteUpload_Call) Run(run func(upload Upload)) *MockStorage_DeleteUpload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 Upload
		if args[0] != nil {
			arg0 = args[0].(Upload)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_DeleteUpload_Call) Return(err error) *MockStorage_DeleteUpload_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_DeleteUpload_Call) RunAndReturn(run func(upload Upload) error) *MockStorage_DeleteUpload_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUploads provides a mock function for the type MockStorage
func (_mock *MockStorage) DeleteUploads(uploads []Upload) {
	_mock.Called(uploads)
	return
}

// MockStorage_DeleteUploads_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUploads'
type MockStorage_DeleteUploads_Call struct {
	*mock.Call
}

// DeleteUploads is a helper method to define mock.On call
//   - uploads []Upload
func (_e *MockStorage_Expecter) DeleteUploads(uploads interface{}) *MockStorage_DeleteUploads_Call {
	return &MockStorage_DeleteUploads_Call{Call: _e.mock.On("DeleteUploads", uploads)}
}

func (_c *MockStorage_DeleteUploads_Call) Run(run func(uploads []Upload)) *MockStorage_DeleteUploads_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []Upload
		if args[0] != nil {
			arg0 = args[0].([]Upload)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_DeleteUploads_Call) Return() *MockStorage_DeleteUploads_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockStorage_DeleteUploads_Call) RunAndReturn(run func(uploads []Upload)) *MockStorage_DeleteUploads_Call {
	_c.Run(run)
	return _c
}

// DeleteUploadsByTicker provides a mock function for the type MockStorage
func (_mock *MockStorage) DeleteUploadsByTicker(ticker *Ticker) error {
	ret := _mock.Called(ticker)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUploadsByTicker")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*Ticker) error); ok {
		r0 = returnFunc(ticker)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_DeleteUploadsByTicker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUploadsByTicker'
type MockStorage_DeleteUploadsByTicker_Call struct {
	*mock.Call
}

// DeleteUploadsByTicker is a helper method to define mock.On call
//   - ticker *Ticker
func (_e *MockStorage_Expecter) DeleteUploadsByTicker(ticker interface{}) *MockStorage_DeleteUploadsByTicker_Call {
	return &MockStorage_DeleteUploadsByTicker_Call{Call: _e.mock.On("DeleteUploadsByTicker", ticker)}
}

func (_c *MockStorage_DeleteUploadsByTicker_Call) Run(run func(ticker *Ticker)) *MockStorage_DeleteUploadsByTicker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Ticker
		if args[0] != nil {
			arg0 = args[0].(*Ticker)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_DeleteUploadsByTicker_Call) Return(err error) *MockStorage_DeleteUploadsByTicker_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_DeleteUploadsByTicker_Call) RunAndReturn(run func(ticker *Ticker) error) *MockStorage_DeleteUploadsByTicker_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type MockStorage
func (_mock *MockStorage) DeleteUser(user User) error {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(User) error); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockStorage_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - user User
func (_e *MockStorage_Expecter) DeleteUser(user interface{}) *MockStorage_DeleteUser_Call {
	return &MockStorage_DeleteUser_Call{Call: _e.mock.On("DeleteUser", user)}
}

func (_c *MockStorage_DeleteUser_Call) Run(run func(user User)) *MockStorage_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 User
		if args[0] != nil {
			arg0 = args[0].(User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_DeleteUser_Call) Return(err error) *MockStorage_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_DeleteUser_Call) RunAndReturn(run func(user User) error) *MockStorage_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindMessage provides a mock function for the type MockStorage
func (_mock *MockStorage) FindMessage(tickerID int, messageID int, opts ...func(*gorm.DB) *gorm.DB) (Message, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(tickerID, messageID, opts)
	} else {
		tmpRet = _mock.Called(tickerID, messageID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for FindMessage")
	}

	var r0 Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int, ...func(*gorm.DB) *gorm.DB) (Message, error)); ok {
		return returnFunc(tickerID, messageID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int, ...func(*gorm.DB) *gorm.DB) Message); ok {
		r0 = returnFunc(tickerID, messageID, opts...)
	} else {
		r0 = ret.Get(0).(Message)
	}
	if returnFunc, ok := ret.Get(1).(func(int, int, ...func(*gorm.DB) *gorm.DB) error); ok {
		r1 = returnFunc(tickerID, messageID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_FindMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMessage'
type MockStorage_FindMessage_Call struct {
	*mock.Call
}

// FindMessage is a helper method to define mock.On call
//   - tickerID int
//   - messageID int
//   - opts ...func(*gorm.DB) *gorm.DB
func (_e *MockStorage_Expecter) FindMessage(tickerID interface{}, messageID interface{}, opts ...interface{}) *MockStorage_FindMessage_Call {
	return &MockStorage_FindMessage_Call{Call: _e.mock.On("FindMessage",
		append([]interface{}{tickerID, messageID}, opts...)...)}
}

func (_c *MockStorage_FindMessage_Call) Run(run func(tickerID int, messageID int, opts ...func(*gorm.DB) *gorm.DB)) *MockStorage_FindMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 []func(*gorm.DB) *gorm.DB
		var variadicArgs []func(*gorm.DB) *gorm.DB
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*gorm.DB) *gorm.DB)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockStorage_FindMessage_Call) Return(message Message, err error) *MockStorage_FindMessage_Call {
	_c.Call.Return(message, err)
	return _c
}

func (_c *MockStorage_FindMessage_Call) RunAndReturn(run func(tickerID int, messageID int, opts ...func(*gorm.DB) *gorm.DB) (Message, error)) *MockStorage_FindMessage_Call {
	_c.Call.Return(run)
	return _c
}

// FindMessagesByTicker provides a mock function for the type MockStorage
func (_mock *MockStorage) FindMessagesByTicker(ticker Ticker, opts ...func(*gorm.DB) *gorm.DB) ([]Message, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ticker, opts)
	} else {
		tmpRet = _mock.Called(ticker)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for FindMessagesByTicker")
	}

	var r0 []Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(Ticker, ...func(*gorm.DB) *gorm.DB) ([]Message, error)); ok {
		return returnFunc(ticker, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(Ticker, ...func(*gorm.DB) *gorm.DB) []Message); ok {
		r0 = returnFunc(ticker, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(Ticker, ...func(*gorm.DB) *gorm.DB) error); ok {
		r1 = returnFunc(ticker, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_FindMessagesByTicker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMessagesByTicker'
type MockStorage_FindMessagesByTicker_Call struct {
	*mock.Call
}

// FindMessagesByTicker is a helper method to define mock.On call
//   - ticker Ticker
//   - opts ...func(*gorm.DB) *gorm.DB
func (_e *MockStorage_Expecter) FindMessagesByTicker(ticker interface{}, opts ...interface{}) *MockStorage_FindMessagesByTicker_Call {
	return &MockStorage_FindMessagesByTicker_Call{Call: _e.mock.On("FindMessagesByTicker",
		append([]interface{}{ticker}, opts...)...)}
}

func (_c *MockStorage_FindMessagesByTicker_Call) Run(run func(ticker Ticker, opts ...func(*gorm.DB) *gorm.DB)) *MockStorage_FindMessagesByTicker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 Ticker
		if args[0] != nil {
			arg0 = args[0].(Ticker)
		}
		var arg1 []func(*gorm.DB) *gorm.DB
		var variadicArgs []func(*gorm.DB) *gorm.DB
		if len(args) > 1 {
			variadicArgs = args[1].([]func(*gorm.DB) *gorm.DB)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockStorage_FindMessagesByTicker_Call) Return(messages []Message, err error) *MockStorage_FindMessagesByTicker_Call {
	_c.Call.Return(messages, err)
	return _c
}

func (_c *MockStorage_FindMessagesByTicker_Call) RunAndReturn(run func(ticker Ticker, opts ...func(*gorm.DB) *gorm.DB) ([]Message, error)) *MockStorage_FindMessagesByTicker_Call {
	_c.Call.Return(run)
	return _c
}

// FindMessagesByTickerAndPagination provides a mock function for the type MockStorage
func (_mock *MockStorage) FindMessagesByTickerAndPagination(ticker Ticker, pagination1 pagination.Pagination, opts ...func(*gorm.DB) *gorm.DB) ([]Message, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ticker, pagination1, opts)
	} else {
		tmpRet = _mock.Called(ticker, pagination1)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for FindMessagesByTickerAndPagination")
	}

	var r0 []Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(Ticker, pagination.Pagination, ...func(*gorm.DB) *gorm.DB) ([]Message, error)); ok {
		return returnFunc(ticker, pagination1, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(Ticker, pagination.Pagination, ...func(*gorm.DB) *gorm.DB) []Message); ok {
		r0 = returnFunc(ticker, pagination1, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(Ticker, pagination.Pagination, ...func(*gorm.DB) *gorm.DB) error); ok {
		r1 = returnFunc(ticker, pagination1, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_FindMessagesByTickerAndPagination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMessagesByTickerAndPagination'
type MockStorage_FindMessagesByTickerAndPagination_Call struct {
	*mock.Call
}

// FindMessagesByTickerAndPagination is a helper method to define mock.On call
//   - ticker Ticker
//   - pagination1 pagination.Pagination
//   - opts ...func(*gorm.DB) *gorm.DB
func (_e *MockStorage_Expecter) FindMessagesByTickerAndPagination(ticker interface{}, pagination1 interface{}, opts ...interface{}) *MockStorage_FindMessagesByTickerAndPagination_Call {
	return &MockStorage_FindMessagesByTickerAndPagination_Call{Call: _e.mock.On("FindMessagesByTickerAndPagination",
		append([]interface{}{ticker, pagination1}, opts...)...)}
}

func (_c *MockStorage_FindMessagesByTickerAndPagination_Call) Run(run func(ticker Ticker, pagination1 pagination.Pagination, opts ...func(*gorm.DB) *gorm.DB)) *MockStorage_FindMessagesByTickerAndPagination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 Ticker
		if args[0] != nil {
			arg0 = args[0].(Ticker)
		}
		var arg1 pagination.Pagination
		if args[1] != nil {
			arg1 = args[1].(pagination.Pagination)
		}
		var arg2 []func(*gorm.DB) *gorm.DB
		var variadicArgs []func(*gorm.DB) *gorm.DB
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*gorm.DB) *gorm.DB)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockStorage_FindMessagesByTickerAndPagination_Call) Return(messages []Message, err error) *MockStorage_FindMessagesByTickerAndPagination_Call {
	_c.Call.Return(messages, err)
	return _c
}

func (_c *MockStorage_FindMessagesByTickerAndPagination_Call) RunAndReturn(run func(ticker Ticker, pagination1 pagination.Pagination, opts ...func(*gorm.DB) *gorm.DB) ([]Message, error)) *MockStorage_FindMessagesByTickerAndPagination_Call {
	_c.Call.Return(run)
	return _c
}

// FindTickerByID provides a mock function for the type MockStorage
func (_mock *MockStorage) FindTickerByID(id int, opts ...func(*gorm.DB) *gorm.DB) (Ticker, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(id, opts)
	} else {
		tmpRet = _mock.Called(id)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for FindTickerByID")
	}

	var r0 Ticker
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, ...func(*gorm.DB) *gorm.DB) (Ticker, error)); ok {
		return returnFunc(id, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(int, ...func(*gorm.DB) *gorm.DB) Ticker); ok {
		r0 = returnFunc(id, opts...)
	} else {
		r0 = ret.Get(0).(Ticker)
	}
	if returnFunc, ok := ret.Get(1).(func(int, ...func(*gorm.DB) *gorm.DB) error); ok {
		r1 = returnFunc(id, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_FindTickerByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTickerByID'
type MockStorage_FindTickerByID_Call struct {
	*mock.Call
}

// FindTickerByID is a helper method to define mock.On call
//   - id int
//   - opts ...func(*gorm.DB) *gorm.DB
func (_e *MockStorage_Expecter) FindTickerByID(id interface{}, opts ...interface{}) *MockStorage_FindTickerByID_Call {
	return &MockStorage_FindTickerByID_Call{Call: _e.mock.On("FindTickerByID",
		append([]interface{}{id}, opts...)...)}
}

func (_c *MockStorage_FindTickerByID_Call) Run(run func(id int, opts ...func(*gorm.DB) *gorm.DB)) *MockStorage_FindTickerByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 []func(*gorm.DB) *gorm.DB
		var variadicArgs []func(*gorm.DB) *gorm.DB
		if len(args) > 1 {
			variadicArgs = args[1].([]func(*gorm.DB) *gorm.DB)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockStorage_FindTickerByID_Call) Return(ticker Ticker, err error) *MockStorage_FindTickerByID_Call {
	_c.Call.Return(ticker, err)
	return _c
}

func (_c *MockStorage_FindTickerByID_Call) RunAndReturn(run func(id int, opts ...func(*gorm.DB) *gorm.DB) (Ticker, error)) *MockStorage_FindTickerByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindTickerByOrigin provides a mock function for the type MockStorage
func (_mock *MockStorage) FindTickerByOrigin(origin string, opts ...func(*gorm.DB) *gorm.DB) (Ticker, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(origin, opts)
	} else {
		tmpRet = _mock.Called(origin)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for FindTickerByOrigin")
	}

	var r0 Ticker
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, ...func(*gorm.DB) *gorm.DB) (Ticker, error)); ok {
		return returnFunc(origin, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(string, ...func(*gorm.DB) *gorm.DB) Ticker); ok {
		r0 = returnFunc(origin, opts...)
	} else {
		r0 = ret.Get(0).(Ticker)
	}
	if returnFunc, ok := ret.Get(1).(func(string, ...func(*gorm.DB) *gorm.DB) error); ok {
		r1 = returnFunc(origin, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_FindTickerByOrigin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTickerByOrigin'
type MockStorage_FindTickerByOrigin_Call struct {
	*mock.Call
}

// FindTickerByOrigin is a helper method to define mock.On call
//   - origin string
//   - opts ...func(*gorm.DB) *gorm.DB
func (_e *MockStorage_Expecter) FindTickerByOrigin(origin interface{}, opts ...interface{}) *MockStorage_FindTickerByOrigin_Call {
	return &MockStorage_FindTickerByOrigin_Call{Call: _e.mock.On("FindTickerByOrigin",
		append([]interface{}{origin}, opts...)...)}
}

func (_c *MockStorage_FindTickerByOrigin_Call) Run(run func(origin string, opts ...func(*gorm.DB) *gorm.DB)) *MockStorage_FindTickerByOrigin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []func(*gorm.DB) *gorm.DB
		var variadicArgs []func(*gorm.DB) *gorm.DB
		if len(args) > 1 {
			variadicArgs = args[1].([]func(*gorm.DB) *gorm.DB)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockStorage_FindTickerByOrigin_Call) Return(ticker Ticker, err error) *MockStorage_FindTickerByOrigin_Call {
	_c.Call.Return(ticker, err)
	return _c
}

func (_c *MockStorage_FindTickerByOrigin_Call) RunAndReturn(run func(origin string, opts ...func(*gorm.DB) *gorm.DB) (Ticker, error)) *MockStorage_FindTickerByOrigin_Call {
	_c.Call.Return(run)
	return _c
}

// FindTickerByUserAndID provides a mock function for the type MockStorage
func (_mock *MockStorage) FindTickerByUserAndID(user User, id int, opts ...func(*gorm.DB) *gorm.DB) (Ticker, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(user, id, opts)
	} else {
		tmpRet = _mock.Called(user, id)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for FindTickerByUserAndID")
	}

	var r0 Ticker
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(User, int, ...func(*gorm.DB) *gorm.DB) (Ticker, error)); ok {
		return returnFunc(user, id, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(User, int, ...func(*gorm.DB) *gorm.DB) Ticker); ok {
		r0 = returnFunc(user, id, opts...)
	} else {
		r0 = ret.Get(0).(Ticker)
	}
	if returnFunc, ok := ret.Get(1).(func(User, int, ...func(*gorm.DB) *gorm.DB) error); ok {
		r1 = returnFunc(user, id, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_FindTickerByUserAndID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTickerByUserAndID'
type MockStorage_FindTickerByUserAndID_Call struct {
	*mock.Call
}

// FindTickerByUserAndID is a helper method to define mock.On call
//   - user User
//   - id int
//   - opts ...func(*gorm.DB) *gorm.DB
func (_e *MockStorage_Expecter) FindTickerByUserAndID(user interface{}, id interface{}, opts ...interface{}) *MockStorage_FindTickerByUserAndID_Call {
	return &MockStorage_FindTickerByUserAndID_Call{Call: _e.mock.On("FindTickerByUserAndID",
		append([]interface{}{user, id}, opts...)...)}
}

func (_c *MockStorage_FindTickerByUserAndID_Call) Run(run func(user User, id int, opts ...func(*gorm.DB) *gorm.DB)) *MockStorage_FindTickerByUserAndID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 User
		if args[0] != nil {
			arg0 = args[0].(User)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 []func(*gorm.DB) *gorm.DB
		var variadicArgs []func(*gorm.DB) *gorm.DB
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*gorm.DB) *gorm.DB)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockStorage_FindTickerByUserAndID_Call) Return(ticker Ticker, err error) *MockStorage_FindTickerByUserAndID_Call {
	_c.Call.Return(ticker, err)
	return _c
}

func (_c *MockStorage_FindTickerByUserAndID_Call) RunAndReturn(run func(user User, id int, opts ...func(*gorm.DB) *gorm.DB) (Ticker, error)) *MockStorage_FindTickerByUserAndID_Call {
	_c.Call.Return(run)
	return _c
}

// FindTickersByIDs provides a mock function for the type MockStorage
func (_mock *MockStorage) FindTickersByIDs(ids []int, opts ...func(*gorm.DB) *gorm.DB) ([]Ticker, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ids, opts)
	} else {
		tmpRet = _mock.Called(ids)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for FindTickersByIDs")
	}

	var r0 []Ticker
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]int, ...func(*gorm.DB) *gorm.DB) ([]Ticker, error)); ok {
		return returnFunc(ids, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func([]int, ...func(*gorm.DB) *gorm.DB) []Ticker); ok {
		r0 = returnFunc(ids, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Ticker)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]int, ...func(*gorm.DB) *gorm.DB) error); ok {
		r1 = returnFunc(ids, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_FindTickersByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTickersByIDs'
type MockStorage_FindTickersByIDs_Call struct {
	*mock.Call
}

// FindTickersByIDs is a helper method to define mock.On call
//   - ids []int
//   - opts ...func(*gorm.DB) *gorm.DB
func (_e *MockStorage_Expecter) FindTickersByIDs(ids interface{}, opts ...interface{}) *MockStorage_FindTickersByIDs_Call {
	return &MockStorage_FindTickersByIDs_Call{Call: _e.mock.On("FindTickersByIDs",
		append([]interface{}{ids}, opts...)...)}
}

func (_c *MockStorage_FindTickersByIDs_Call) Run(run func(ids []int, opts ...func(*gorm.DB) *gorm.DB)) *MockStorage_FindTickersByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []int
		if args[0] != nil {
			arg0 = args[0].([]int)
		}
		var arg1 []func(*gorm.DB) *gorm.DB
		var variadicArgs []func(*gorm.DB) *gorm.DB
		if len(args) > 1 {
			variadicArgs = args[1].([]func(*gorm.DB) *gorm.DB)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockStorage_FindTickersByIDs_Call) Return(tickers []Ticker, err error) *MockStorage_FindTickersByIDs_Call {
	_c.Call.Return(tickers, err)
	return _c
}

func (_c *MockStorage_FindTickersByIDs_Call) RunAndReturn(run func(ids []int, opts ...func(*gorm.DB) *gorm.DB) ([]Ticker, error)) *MockStorage_FindTickersByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// FindTickersByUser provides a mock function for the type MockStorage
func (_mock *MockStorage) FindTickersByUser(user User, filter TickerFilter, opts ...func(*gorm.DB) *gorm.DB) ([]Ticker, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(user, filter, opts)
	} else {
		tmpRet = _mock.Called(user, filter)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for FindTickersByUser")
	}

	var r0 []Ticker
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(User, TickerFilter, ...func(*gorm.DB) *gorm.DB) ([]Ticker, error)); ok {
		return returnFunc(user, filter, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(User, TickerFilter, ...func(*gorm.DB) *gorm.DB) []Ticker); ok {
		r0 = returnFunc(user, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Ticker)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(User, TickerFilter, ...func(*gorm.DB) *gorm.DB) error); ok {
		r1 = returnFunc(user, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_FindTickersByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTickersByUser'
type MockStorage_FindTickersByUser_Call struct {
	*mock.Call
}

// FindTickersByUser is a helper method to define mock.On call
//   - user User
//   - filter TickerFilter
//   - opts ...func(*gorm.DB) *gorm.DB
func (_e *MockStorage_Expecter) FindTickersByUser(user interface{}, filter interface{}, opts ...interface{}) *MockStorage_FindTickersByUser_Call {
	return &MockStorage_FindTickersByUser_Call{Call: _e.mock.On("FindTickersByUser",
		append([]interface{}{user, filter}, opts...)...)}
}

func (_c *MockStorage_FindTickersByUser_Call) Run(run func(user User, filter TickerFilter, opts ...func(*gorm.DB) *gorm.DB)) *MockStorage_FindTickersByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 User
		if args[0] != nil {
			arg0 = args[0].(User)
		}
		var arg1 TickerFilter
		if args[1] != nil {
			arg1 = args[1].(TickerFilter)
		}
		var arg2 []func(*gorm.DB) *gorm.DB
		var variadicArgs []func(*gorm.DB) *gorm.DB
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*gorm.DB) *gorm.DB)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockStorage_FindTickersByUser_Call) Return(tickers []Ticker, err error) *MockStorage_FindTickersByUser_Call {
	_c.Call.Return(tickers, err)
	return _c
}

func (_c *MockStorage_FindTickersByUser_Call) RunAndReturn(run func(user User, filter TickerFilter, opts ...func(*gorm.DB) *gorm.DB) ([]Ticker, error)) *MockStorage_FindTickersByUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindUploadByUUID provides a mock function for the type MockStorage
func (_mock *MockStorage) FindUploadByUUID(uuid string) (Upload, error) {
	ret := _mock.Called(uuid)

	if len(ret) == 0 {
		panic("no return value specified for FindUploadByUUID")
	}

	var r0 Upload
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (Upload, error)); ok {
		return returnFunc(uuid)
	}
	if returnFunc, ok := ret.Get(0).(func(string) Upload); ok {
		r0 = returnFunc(uuid)
	} else {
		r0 = ret.Get(0).(Upload)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(uuid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_FindUploadByUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUploadByUUID'
type MockStorage_FindUploadByUUID_Call struct {
	*mock.Call
}

// FindUploadByUUID is a helper method to define mock.On call
//   - uuid string
func (_e *MockStorage_Expecter) FindUploadByUUID(uuid interface{}) *MockStorage_FindUploadByUUID_Call {
	return &MockStorage_FindUploadByUUID_Call{Call: _e.mock.On("FindUploadByUUID", uuid)}
}

func (_c *MockStorage_FindUploadByUUID_Call) Run(run func(uuid string)) *MockStorage_FindUploadByUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_FindUploadByUUID_Call) Return(upload Upload, err error) *MockStorage_FindUploadByUUID_Call {
	_c.Call.Return(upload, err)
	return _c
}

func (_c *MockStorage_FindUploadByUUID_Call) RunAndReturn(run func(uuid string) (Upload, error)) *MockStorage_FindUploadByUUID_Call {
	_c.Call.Return(run)
	return _c
}

// FindUploadsByIDs provides a mock function for the type MockStorage
func (_mock *MockStorage) FindUploadsByIDs(ids []int) ([]Upload, error) {
	ret := _mock.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for FindUploadsByIDs")
	}

	var r0 []Upload
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]int) ([]Upload, error)); ok {
		return returnFunc(ids)
	}
	if returnFunc, ok := ret.Get(0).(func([]int) []Upload); ok {
		r0 = returnFunc(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Upload)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]int) error); ok {
		r1 = returnFunc(ids)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_FindUploadsByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUploadsByIDs'
type MockStorage_FindUploadsByIDs_Call struct {
	*mock.Call
}

// FindUploadsByIDs is a helper method to define mock.On call
//   - ids []int
func (_e *MockStorage_Expecter) FindUploadsByIDs(ids interface{}) *MockStorage_FindUploadsByIDs_Call {
	return &MockStorage_FindUploadsByIDs_Call{Call: _e.mock.On("FindUploadsByIDs", ids)}
}

func (_c *MockStorage_FindUploadsByIDs_Call) Run(run func(ids []int)) *MockStorage_FindUploadsByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []int
		if args[0] != nil {
			arg0 = args[0].([]int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_FindUploadsByIDs_Call) Return(uploads []Upload, err error) *MockStorage_FindUploadsByIDs_Call {
	_c.Call.Return(uploads, err)
	return _c
}

func (_c *MockStorage_FindUploadsByIDs_Call) RunAndReturn(run func(ids []int) ([]Upload, error)) *MockStorage_FindUploadsByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByEmail provides a mock function for the type MockStorage
func (_mock *MockStorage) FindUserByEmail(email string, opts ...func(*gorm.DB) *gorm.DB) (User, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(email, opts)
	} else {
		tmpRet = _mock.Called(email)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for FindUserByEmail")
	}

	var r0 User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, ...func(*gorm.DB) *gorm.DB) (User, error)); ok {
		return returnFunc(email, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(string, ...func(*gorm.DB) *gorm.DB) User); ok {
		r0 = returnFunc(email, opts...)
	} else {
		r0 = ret.Get(0).(User)
	}
	if returnFunc, ok := ret.Get(1).(func(string, ...func(*gorm.DB) *gorm.DB) error); ok {
		r1 = returnFunc(email, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_FindUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByEmail'
type MockStorage_FindUserByEmail_Call struct {
	*mock.Call
}

// FindUserByEmail is a helper method to define mock.On call
//   - email string
//   - opts ...func(*gorm.DB) *gorm.DB
func (_e *MockStorage_Expecter) FindUserByEmail(email interface{}, opts ...interface{}) *MockStorage_FindUserByEmail_Call {
	return &MockStorage_FindUserByEmail_Call{Call: _e.mock.On("FindUserByEmail",
		append([]interface{}{email}, opts...)...)}
}

func (_c *MockStorage_FindUserByEmail_Call) Run(run func(email string, opts ...func(*gorm.DB) *gorm.DB)) *MockStorage_FindUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []func(*gorm.DB) *gorm.DB
		var variadicArgs []func(*gorm.DB) *gorm.DB
		if len(args) > 1 {
			variadicArgs = args[1].([]func(*gorm.DB) *gorm.DB)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockStorage_FindUserByEmail_Call) Return(user User, err error) *MockStorage_FindUserByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockStorage_FindUserByEmail_Call) RunAndReturn(run func(email string, opts ...func(*gorm.DB) *gorm.DB) (User, error)) *MockStorage_FindUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByID provides a mock function for the type MockStorage
func (_mock *MockStorage) FindUserByID(id int, opts ...func(*gorm.DB) *gorm.DB) (User, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(id, opts)
	} else {
		tmpRet = _mock.Called(id)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for FindUserByID")
	}

	var r0 User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, ...func(*gorm.DB) *gorm.DB) (User, error)); ok {
		return returnFunc(id, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(int, ...func(*gorm.DB) *gorm.DB) User); ok {
		r0 = returnFunc(id, opts...)
	} else {
		r0 = ret.Get(0).(User)
	}
	if returnFunc, ok := ret.Get(1).(func(int, ...func(*gorm.DB) *gorm.DB) error); ok {
		r1 = returnFunc(id, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_FindUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByID'
type MockStorage_FindUserByID_Call struct {
	*mock.Call
}

// FindUserByID is a helper method to define mock.On call
//   - id int
//   - opts ...func(*gorm.DB) *gorm.DB
func (_e *MockStorage_Expecter) FindUserByID(id interface{}, opts ...interface{}) *MockStorage_FindUserByID_Call {
	return &MockStorage_FindUserByID_Call{Call: _e.mock.On("FindUserByID",
		append([]interface{}{id}, opts...)...)}
}

func (_c *MockStorage_FindUserByID_Call) Run(run func(id int, opts ...func(*gorm.DB) *gorm.DB)) *MockStorage_FindUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 []func(*gorm.DB) *gorm.DB
		var variadicArgs []func(*gorm.DB) *gorm.DB
		if len(args) > 1 {
			variadicArgs = args[1].([]func(*gorm.DB) *gorm.DB)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockStorage_FindUserByID_Call) Return(user User, err error) *MockStorage_FindUserByID_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockStorage_FindUserByID_Call) RunAndReturn(run func(id int, opts ...func(*gorm.DB) *gorm.DB) (User, error)) *MockStorage_FindUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindUsers provides a mock function for the type MockStorage
func (_mock *MockStorage) FindUsers(filter UserFilter, opts ...func(*gorm.DB) *gorm.DB) ([]User, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(filter, opts)
	} else {
		tmpRet = _mock.Called(filter)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for FindUsers")
	}

	var r0 []User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(UserFilter, ...func(*gorm.DB) *gorm.DB) ([]User, error)); ok {
		return returnFunc(filter, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(UserFilter, ...func(*gorm.DB) *gorm.DB) []User); ok {
		r0 = returnFunc(filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(UserFilter, ...func(*gorm.DB) *gorm.DB) error); ok {
		r1 = returnFunc(filter, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_FindUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUsers'
type MockStorage_FindUsers_Call struct {
	*mock.Call
}

// FindUsers is a helper method to define mock.On call
//   - filter UserFilter
//   - opts ...func(*gorm.DB) *gorm.DB
func (_e *MockStorage_Expecter) FindUsers(filter interface{}, opts ...interface{}) *MockStorage_FindUsers_Call {
	return &MockStorage_FindUsers_Call{Call: _e.mock.On("FindUsers",
		append([]interface{}{filter}, opts...)...)}
}

func (_c *MockStorage_FindUsers_Call) Run(run func(filter UserFilter, opts ...func(*gorm.DB) *gorm.DB)) *MockStorage_FindUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 UserFilter
		if args[0] != nil {
			arg0 = args[0].(UserFilter)
		}
		var arg1 []func(*gorm.DB) *gorm.DB
		var variadicArgs []func(*gorm.DB) *gorm.DB
		if len(args) > 1 {
			variadicArgs = args[1].([]func(*gorm.DB) *gorm.DB)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockStorage_FindUsers_Call) Return(users []User, err error) *MockStorage_FindUsers_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockStorage_FindUsers_Call) RunAndReturn(run func(filter UserFilter, opts ...func(*gorm.DB) *gorm.DB) ([]User, error)) *MockStorage_FindUsers_Call {
	_c.Call.Return(run)
	return _c
}

// FindUsersByIDs provides a mock function for the type MockStorage
func (_mock *MockStorage) FindUsersByIDs(ids []int, opts ...func(*gorm.DB) *gorm.DB) ([]User, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ids, opts)
	} else {
		tmpRet = _mock.Called(ids)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for FindUsersByIDs")
	}

	var r0 []User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]int, ...func(*gorm.DB) *gorm.DB) ([]User, error)); ok {
		return returnFunc(ids, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func([]int, ...func(*gorm.DB) *gorm.DB) []User); ok {
		r0 = returnFunc(ids, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]int, ...func(*gorm.DB) *gorm.DB) error); ok {
		r1 = returnFunc(ids, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_FindUsersByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUsersByIDs'
type MockStorage_FindUsersByIDs_Call struct {
	*mock.Call
}

// FindUsersByIDs is a helper method to define mock.On call
//   - ids []int
//   - opts ...func(*gorm.DB) *gorm.DB
func (_e *MockStorage_Expecter) FindUsersByIDs(ids interface{}, opts ...interface{}) *MockStorage_FindUsersByIDs_Call {
	return &MockStorage_FindUsersByIDs_Call{Call: _e.mock.On("FindUsersByIDs",
		append([]interface{}{ids}, opts...)...)}
}

func (_c *MockStorage_FindUsersByIDs_Call) Run(run func(ids []int, opts ...func(*gorm.DB) *gorm.DB)) *MockStorage_FindUsersByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []int
		if args[0] != nil {
			arg0 = args[0].([]int)
		}
		var arg1 []func(*gorm.DB) *gorm.DB
		var variadicArgs []func(*gorm.DB) *gorm.DB
		if len(args) > 1 {
			variadicArgs = args[1].([]func(*gorm.DB) *gorm.DB)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockStorage_FindUsersByIDs_Call) Return(users []User, err error) *MockStorage_FindUsersByIDs_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockStorage_FindUsersByIDs_Call) RunAndReturn(run func(ids []int, opts ...func(*gorm.DB) *gorm.DB) ([]User, error)) *MockStorage_FindUsersByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// FindUsersByTicker provides a mock function for the type MockStorage
func (_mock *MockStorage) FindUsersByTicker(ticker Ticker, opts ...func(*gorm.DB) *gorm.DB) ([]User, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ticker, opts)
	} else {
		tmpRet = _mock.Called(ticker)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for FindUsersByTicker")
	}

	var r0 []User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(Ticker, ...func(*gorm.DB) *gorm.DB) ([]User, error)); ok {
		return returnFunc(ticker, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(Ticker, ...func(*gorm.DB) *gorm.DB) []User); ok {
		r0 = returnFunc(ticker, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(Ticker, ...func(*gorm.DB) *gorm.DB) error); ok {
		r1 = returnFunc(ticker, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_FindUsersByTicker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUsersByTicker'
type MockStorage_FindUsersByTicker_Call struct {
	*mock.Call
}

// FindUsersByTicker is a helper method to define mock.On call
//   - ticker Ticker
//   - opts ...func(*gorm.DB) *gorm.DB
func (_e *MockStorage_Expecter) FindUsersByTicker(ticker interface{}, opts ...interface{}) *MockStorage_FindUsersByTicker_Call {
	return &MockStorage_FindUsersByTicker_Call{Call: _e.mock.On("FindUsersByTicker",
		append([]interface{}{ticker}, opts...)...)}
}

func (_c *MockStorage_FindUsersByTicker_Call) Run(run func(ticker Ticker, opts ...func(*gorm.DB) *gorm.DB)) *MockStorage_FindUsersByTicker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 Ticker
		if args[0] != nil {
			arg0 = args[0].(Ticker)
		}
		var arg1 []func(*gorm.DB) *gorm.DB
		var variadicArgs []func(*gorm.DB) *gorm.DB
		if len(args) > 1 {
			variadicArgs = args[1].([]func(*gorm.DB) *gorm.DB)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockStorage_FindUsersByTicker_Call) Return(users []User, err error) *MockStorage_FindUsersByTicker_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockStorage_FindUsersByTicker_Call) RunAndReturn(run func(ticker Ticker, opts ...func(*gorm.DB) *gorm.DB) ([]User, error)) *MockStorage_FindUsersByTicker_Call {
	_c.Call.Return(run)
	return _c
}

// GetInactiveSettings provides a mock function for the type MockStorage
func (_mock *MockStorage) GetInactiveSettings() InactiveSettings {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInactiveSettings")
	}

	var r0 InactiveSettings
	if returnFunc, ok := ret.Get(0).(func() InactiveSettings); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(InactiveSettings)
	}
	return r0
}

// MockStorage_GetInactiveSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInactiveSettings'
type MockStorage_GetInactiveSettings_Call struct {
	*mock.Call
}

// GetInactiveSettings is a helper method to define mock.On call
func (_e *MockStorage_Expecter) GetInactiveSettings() *MockStorage_GetInactiveSettings_Call {
	return &MockStorage_GetInactiveSettings_Call{Call: _e.mock.On("GetInactiveSettings")}
}

func (_c *MockStorage_GetInactiveSettings_Call) Run(run func()) *MockStorage_GetInactiveSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorage_GetInactiveSettings_Call) Return(inactiveSettings InactiveSettings) *MockStorage_GetInactiveSettings_Call {
	_c.Call.Return(inactiveSettings)
	return _c
}

func (_c *MockStorage_GetInactiveSettings_Call) RunAndReturn(run func() InactiveSettings) *MockStorage_GetInactiveSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetTelegramSettings provides a mock function for the type MockStorage
func (_mock *MockStorage) GetTelegramSettings() TelegramSettings {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTelegramSettings")
	}

	var r0 TelegramSettings
	if returnFunc, ok := ret.Get(0).(func() TelegramSettings); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(TelegramSettings)
	}
	return r0
}

// MockStorage_GetTelegramSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTelegramSettings'
type MockStorage_GetTelegramSettings_Call struct {
	*mock.Call
}

// GetTelegramSettings is a helper method to define mock.On call
func (_e *MockStorage_Expecter) GetTelegramSettings() *MockStorage_GetTelegramSettings_Call {
	return &MockStorage_GetTelegramSettings_Call{Call: _e.mock.On("GetTelegramSettings")}
}

func (_c *MockStorage_GetTelegramSettings_Call) Run(run func()) *MockStorage_GetTelegramSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorage_GetTelegramSettings_Call) Return(telegramSettings TelegramSettings) *MockStorage_GetTelegramSettings_Call {
	_c.Call.Return(telegramSettings)
	return _c
}

func (_c *MockStorage_GetTelegramSettings_Call) RunAndReturn(run func() TelegramSettings) *MockStorage_GetTelegramSettings_Call {
	_c.Call.Return(run)
	return _c
}

// ResetTicker provides a mock function for the type MockStorage
func (_mock *MockStorage) ResetTicker(ticker *Ticker) error {
	ret := _mock.Called(ticker)

	if len(ret) == 0 {
		panic("no return value specified for ResetTicker")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*Ticker) error); ok {
		r0 = returnFunc(ticker)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_ResetTicker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetTicker'
type MockStorage_ResetTicker_Call struct {
	*mock.Call
}

// ResetTicker is a helper method to define mock.On call
//   - ticker *Ticker
func (_e *MockStorage_Expecter) ResetTicker(ticker interface{}) *MockStorage_ResetTicker_Call {
	return &MockStorage_ResetTicker_Call{Call: _e.mock.On("ResetTicker", ticker)}
}

func (_c *MockStorage_ResetTicker_Call) Run(run func(ticker *Ticker)) *MockStorage_ResetTicker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Ticker
		if args[0] != nil {
			arg0 = args[0].(*Ticker)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_ResetTicker_Call) Return(err error) *MockStorage_ResetTicker_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_ResetTicker_Call) RunAndReturn(run func(ticker *Ticker) error) *MockStorage_ResetTicker_Call {
	_c.Call.Return(run)
	return _c
}

// SaveInactiveSettings provides a mock function for the type MockStorage
func (_mock *MockStorage) SaveInactiveSettings(inactiveSettings InactiveSettings) error {
	ret := _mock.Called(inactiveSettings)

	if len(ret) == 0 {
		panic("no return value specified for SaveInactiveSettings")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(InactiveSettings) error); ok {
		r0 = returnFunc(inactiveSettings)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_SaveInactiveSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveInactiveSettings'
type MockStorage_SaveInactiveSettings_Call struct {
	*mock.Call
}

// SaveInactiveSettings is a helper method to define mock.On call
//   - inactiveSettings InactiveSettings
func (_e *MockStorage_Expecter) SaveInactiveSettings(inactiveSettings interface{}) *MockStorage_SaveInactiveSettings_Call {
	return &MockStorage_SaveInactiveSettings_Call{Call: _e.mock.On("SaveInactiveSettings", inactiveSettings)}
}

func (_c *MockStorage_SaveInactiveSettings_Call) Run(run func(inactiveSettings InactiveSettings)) *MockStorage_SaveInactiveSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 InactiveSettings
		if args[0] != nil {
			arg0 = args[0].(InactiveSettings)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_SaveInactiveSettings_Call) Return(err error) *MockStorage_SaveInactiveSettings_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_SaveInactiveSettings_Call) RunAndReturn(run func(inactiveSettings InactiveSettings) error) *MockStorage_SaveInactiveSettings_Call {
	_c.Call.Return(run)
	return _c
}

// SaveMessage provides a mock function for the type MockStorage
func (_mock *MockStorage) SaveMessage(message *Message) error {
	ret := _mock.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for SaveMessage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*Message) error); ok {
		r0 = returnFunc(message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_SaveMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveMessage'
type MockStorage_SaveMessage_Call struct {
	*mock.Call
}

// SaveMessage is a helper method to define mock.On call
//   - message *Message
func (_e *MockStorage_Expecter) SaveMessage(message interface{}) *MockStorage_SaveMessage_Call {
	return &MockStorage_SaveMessage_Call{Call: _e.mock.On("SaveMessage", message)}
}

func (_c *MockStorage_SaveMessage_Call) Run(run func(message *Message)) *MockStorage_SaveMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Message
		if args[0] != nil {
			arg0 = args[0].(*Message)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_SaveMessage_Call) Return(err error) *MockStorage_SaveMessage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_SaveMessage_Call) RunAndReturn(run func(message *Message) error) *MockStorage_SaveMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SaveTelegramSettings provides a mock function for the type MockStorage
func (_mock *MockStorage) SaveTelegramSettings(telegramSettings TelegramSettings) error {
	ret := _mock.Called(telegramSettings)

	if len(ret) == 0 {
		panic("no return value specified for SaveTelegramSettings")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(TelegramSettings) error); ok {
		r0 = returnFunc(telegramSettings)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_SaveTelegramSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveTelegramSettings'
type MockStorage_SaveTelegramSettings_Call struct {
	*mock.Call
}

// SaveTelegramSettings is a helper method to define mock.On call
//   - telegramSettings TelegramSettings
func (_e *MockStorage_Expecter) SaveTelegramSettings(telegramSettings interface{}) *MockStorage_SaveTelegramSettings_Call {
	return &MockStorage_SaveTelegramSettings_Call{Call: _e.mock.On("SaveTelegramSettings", telegramSettings)}
}

func (_c *MockStorage_SaveTelegramSettings_Call) Run(run func(telegramSettings TelegramSettings)) *MockStorage_SaveTelegramSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 TelegramSettings
		if args[0] != nil {
			arg0 = args[0].(TelegramSettings)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_SaveTelegramSettings_Call) Return(err error) *MockStorage_SaveTelegramSettings_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_SaveTelegramSettings_Call) RunAndReturn(run func(telegramSettings TelegramSettings) error) *MockStorage_SaveTelegramSettings_Call {
	_c.Call.Return(run)
	return _c
}

// SaveTicker provides a mock function for the type MockStorage
func (_mock *MockStorage) SaveTicker(ticker *Ticker) error {
	ret := _mock.Called(ticker)

	if len(ret) == 0 {
		panic("no return value specified for SaveTicker")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*Ticker) error); ok {
		r0 = returnFunc(ticker)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_SaveTicker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveTicker'
type MockStorage_SaveTicker_Call struct {
	*mock.Call
}

// SaveTicker is a helper method to define mock.On call
//   - ticker *Ticker
func (_e *MockStorage_Expecter) SaveTicker(ticker interface{}) *MockStorage_SaveTicker_Call {
	return &MockStorage_SaveTicker_Call{Call: _e.mock.On("SaveTicker", ticker)}
}

func (_c *MockStorage_SaveTicker_Call) Run(run func(ticker *Ticker)) *MockStorage_SaveTicker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Ticker
		if args[0] != nil {
			arg0 = args[0].(*Ticker)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_SaveTicker_Call) Return(err error) *MockStorage_SaveTicker_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_SaveTicker_Call) RunAndReturn(run func(ticker *Ticker) error) *MockStorage_SaveTicker_Call {
	_c.Call.Return(run)
	return _c
}

// SaveTickerWebsites provides a mock function for the type MockStorage
func (_mock *MockStorage) SaveTickerWebsites(ticker *Ticker, websites []TickerWebsite) error {
	ret := _mock.Called(ticker, websites)

	if len(ret) == 0 {
		panic("no return value specified for SaveTickerWebsites")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*Ticker, []TickerWebsite) error); ok {
		r0 = returnFunc(ticker, websites)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_SaveTickerWebsites_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveTickerWebsites'
type MockStorage_SaveTickerWebsites_Call struct {
	*mock.Call
}

// SaveTickerWebsites is a helper method to define mock.On call
//   - ticker *Ticker
//   - websites []TickerWebsite
func (_e *MockStorage_Expecter) SaveTickerWebsites(ticker interface{}, websites interface{}) *MockStorage_SaveTickerWebsites_Call {
	return &MockStorage_SaveTickerWebsites_Call{Call: _e.mock.On("SaveTickerWebsites", ticker, websites)}
}

func (_c *MockStorage_SaveTickerWebsites_Call) Run(run func(ticker *Ticker, websites []TickerWebsite)) *MockStorage_SaveTickerWebsites_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Ticker
		if args[0] != nil {
			arg0 = args[0].(*Ticker)
		}
		var arg1 []TickerWebsite
		if args[1] != nil {
			arg1 = args[1].([]TickerWebsite)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_SaveTickerWebsites_Call) Return(err error) *MockStorage_SaveTickerWebsites_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_SaveTickerWebsites_Call) RunAndReturn(run func(ticker *Ticker, websites []TickerWebsite) error) *MockStorage_SaveTickerWebsites_Call {
	_c.Call.Return(run)
	return _c
}

// SaveUpload provides a mock function for the type MockStorage
func (_mock *MockStorage) SaveUpload(upload *Upload) error {
	ret := _mock.Called(upload)

	if len(ret) == 0 {
		panic("no return value specified for SaveUpload")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*Upload) error); ok {
		r0 = returnFunc(upload)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_SaveUpload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUpload'
type MockStorage_SaveUpload_Call struct {
	*mock.Call
}

// SaveUpload is a helper method to define mock.On call
//   - upload *Upload
func (_e *MockStorage_Expecter) SaveUpload(upload interface{}) *MockStorage_SaveUpload_Call {
	return &MockStorage_SaveUpload_Call{Call: _e.mock.On("SaveUpload", upload)}
}

func (_c *MockStorage_SaveUpload_Call) Run(run func(upload *Upload)) *MockStorage_SaveUpload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Upload
		if args[0] != nil {
			arg0 = args[0].(*Upload)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_SaveUpload_Call) Return(err error) *MockStorage_SaveUpload_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_SaveUpload_Call) RunAndReturn(run func(upload *Upload) error) *MockStorage_SaveUpload_Call {
	_c.Call.Return(run)
	return _c
}

// SaveUser provides a mock function for the type MockStorage
func (_mock *MockStorage) SaveUser(user *User) error {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*User) error); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_SaveUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUser'
type MockStorage_SaveUser_Call struct {
	*mock.Call
}

// SaveUser is a helper method to define mock.On call
//   - user *User
func (_e *MockStorage_Expecter) SaveUser(user interface{}) *MockStorage_SaveUser_Call {
	return &MockStorage_SaveUser_Call{Call: _e.mock.On("SaveUser", user)}
}

func (_c *MockStorage_SaveUser_Call) Run(run func(user *User)) *MockStorage_SaveUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *User
		if args[0] != nil {
			arg0 = args[0].(*User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_SaveUser_Call) Return(err error) *MockStorage_SaveUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_SaveUser_Call) RunAndReturn(run func(user *User) error) *MockStorage_SaveUser_Call {
	_c.Call.Return(run)
	return _c
}

// UploadPath provides a mock function for the type MockStorage
func (_mock *MockStorage) UploadPath() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for UploadPath")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockStorage_UploadPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadPath'
type MockStorage_UploadPath_Call struct {
	*mock.Call
}

// UploadPath is a helper method to define mock.On call
func (_e *MockStorage_Expecter) UploadPath() *MockStorage_UploadPath_Call {
	return &MockStorage_UploadPath_Call{Call: _e.mock.On("UploadPath")}
}

func (_c *MockStorage_UploadPath_Call) Run(run func()) *MockStorage_UploadPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorage_UploadPath_Call) Return(s string) *MockStorage_UploadPath_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockStorage_UploadPath_Call) RunAndReturn(run func() string) *MockStorage_UploadPath_Call {
	_c.Call.Return(run)
	return _c
}
