{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Systemli Ticker","text":"<p>Service to distribute short messages in support of events, demonstrations, or other time-sensitive events.</p> <p>This repository contains the API for the Systemli Ticker Project.</p> <p>Requirements</p> <p>The project is written in Go. You should be familiar with the structure and organisation of the code. If not, there are some good guides.</p>"},{"location":"#first-run","title":"First run","text":"<ol> <li> <p>Clone the project</p> <pre><code>git clone https://github.com/systemli/ticker.git\n</code></pre> </li> <li> <p>Start the project</p> <pre><code>cd ticker\ngo run . run\n</code></pre> </li> <li> <p>Check the API</p> <pre><code>curl http://localhost:8080/healthz\n</code></pre> </li> <li> <p>Create a user</p> <pre><code>go run . user create --email &lt;email-address&gt; --password &lt;password&gt; --super-admin\n</code></pre> </li> </ol>"},{"location":"#testing","title":"Testing","text":"<pre><code>go test ./...\n</code></pre>"},{"location":"api/","title":"API Specification","text":"<p>Information</p> <p>The API Specification only contains the public endpoints at the moment.</p> <p></p>"},{"location":"configuration/","title":"Configuration","text":"<pre><code># listen binds ticker to specific address and port\nlisten: \"localhost:8080\"\n# log_level sets log level for logrus\nlog_level: \"error\"\n# log_format sets log format for logrus (default: json)\nlog_format: \"json\"\n# configuration for the database\ndatabase:\n  type: \"sqlite\" # postgres, mysql, sqlite\n  dsn: \"ticker.db\" # postgres: \"host=localhost port=5432 user=ticker dbname=ticker password=ticker sslmode=disable\"\n# secret used for JSON Web Tokens\nsecret: \"slorp-panfil-becall-dorp-hashab-incus-biter-lyra-pelage-sarraf-drunk\"\n# telegram configuration\ntelegram:\n  token: \"\" # telegram bot token\n# signal group configuration\nsignal_group:\n  api_url: \"\" # URL to your signal cli (https://github.com/AsamK/signal-cli)\n  avatar: \"\" # URL to the avatar for the signal group\n  account: \"\" # phone number for the signal account\n# listen port for prometheus metrics exporter\nmetrics_listen: \":8181\"\nupload:\n  # path where to store the uploaded files\n  path: \"uploads\"\n  # base url for uploaded assets\n  url: \"http://localhost:8080\"\n</code></pre> <p>Note</p> <p>All configuration options can be set via environment variables.</p> <p>The following env vars can be used:</p> <ul> <li><code>TICKER_LISTEN</code></li> <li><code>TICKER_LOG_FORMAT</code></li> <li><code>TICKER_LOG_LEVEL</code></li> <li><code>TICKER_DATABASE_TYPE</code></li> <li><code>TICKER_DATABASE_DSN</code></li> <li><code>TICKER_LOG_LEVEL</code></li> <li><code>TICKER_INITIATOR</code></li> <li><code>TICKER_SECRET</code></li> <li><code>TICKER_TELEGRAM_TOKEN</code></li> <li><code>TICKER_SIGNAL_GROUP_API_URL</code></li> <li><code>TICKER_SIGNAL_GROUP_AVATAR</code></li> <li><code>TICKER_SIGNAL_GROUP_ACCOUNT</code></li> <li><code>TICKER_METRICS_LISTEN</code></li> <li><code>TICKER_UPLOAD_PATH</code></li> <li><code>TICKER_UPLOAD_URL</code></li> </ul>"},{"location":"quick-install-all/","title":"Full Installation","text":"<p>This was tested with an Ubuntu 20.04 LTS server.</p> <p>Results may differ on other releases or distributions!</p>"},{"location":"quick-install-all/#requirements","title":"Requirements","text":"<ul> <li><code>git</code></li> <li><code>go</code></li> <li><code>nodejs</code></li> <li><code>yarn</code></li> <li><code>nginx</code></li> <li>certificate (<code>certbot</code> &amp; <code>python3-certbot-nginx</code> to use free Let's Encrypt Certs)</li> <li><code>git</code></li> <li>Public IPv4</li> <li>Public IPv6 (Please!)</li> </ul>"},{"location":"quick-install-all/#getting-go","title":"Getting Go","text":"<p>Don't use the shipped version of your system, if you're working on a Debian based OS (Ubuntu, etc)</p> <p>Instead use:  golang.org install guide</p> <p>Please be also aware, that it's best practice to build your version of \"ticker\" not on the production machine. In order to keep the hurdle as low as possible, we will build the app on the system we're going to run it. To enhance security maybe you want to remove <code>go</code> afterwards.</p>"},{"location":"quick-install-all/#getting-nodejs","title":"Getting NodeJS","text":"<p>Don't use the shipped version of your system, if you're working on a Debian based OS (Ubuntu, etc)</p> <p>Instead use:  nodesource/distributions</p>"},{"location":"quick-install-all/#install-ticker","title":"Install ticker","text":""},{"location":"quick-install-all/#build-from-source","title":"Build from source","text":"<p>As mentioned above, this isn't best practice. You can also build it from source on your dedicated build server, your own pc at home, etc. Then just scp it over to the production Server afterwards.</p> <ol> <li><code>cd /var/www/</code> The directory where we gonna install all the things</li> <li><code>git clone https://github.com/systemli/ticker</code> Clone the repository onto your disk</li> <li><code>cd ticker</code> Go into the just cloned repository</li> <li><code>go build -o build/ticker</code> Build the application</li> <li>Go to \"Configuration, Service and Stuff\"</li> </ol>"},{"location":"quick-install-all/#downloading-a-release-from-github","title":"Downloading a release from GitHub","text":"<ol> <li>Go to https://github.com/systemli/ticker/releases</li> <li>Pick the latest release and download it via <code>wget https://github.com/systemli/ticker/releases/download/&lt;version&gt;/ticker-&lt;version&gt;-&lt;architecture&gt;</code></li> <li><code>mv ticker-&lt;version&gt;-&lt;architecture&gt; /var/www/ticker/ticker</code></li> <li><code>chmod +x /var/www/ticker/ticker</code></li> <li>Go to \"Configuration, Service and Stuff\"</li> </ol>"},{"location":"quick-install-all/#configuration-service-and-stuff","title":"Configuration, Service and Stuff","text":"<ol> <li><code>vim config.yml</code> Fill your config file with the following content:</li> </ol> <pre><code># listen binds ticker to specific address and port\nlisten: \"localhost:8080\"\n# log_level sets log level for logrus\nlog_level: \"error\"\n# configuration for the database\ndatabase:\n    type: \"sqlite\" # postgres, mysql, sqlite\n    dsn: \"ticker.db\" # postgres: \"host=localhost port=5432 user=ticker dbname=ticker password=ticker sslmode=disable\"\n# secret used for JSON Web Tokens\nsecret: \"&lt;your special little secret&gt; (make it LOOOONG!)\"\n# listen port for prometheus metrics exporter\nmetrics_listen: \":8181\"\nupload:\n    # path where to store the uploaded files\n    path: \"uploads\"\n    # base url for uploaded assets\n    url: \"https://api.domain.tld\"\n</code></pre> <ol> <li>Create a systemd Task (see docs/ticker-api.service for reference)</li> <li><code>systemctl enable ticker-api.service</code></li> <li><code>systemctl start ticker-api.service</code></li> <li>If you enter <code>systemctl status ticker-api.service</code> you'll see the generated admin password. Please change it immediately!</li> <li>Done. \\o/ You now have a fully functional ticker API.</li> </ol>"},{"location":"quick-install-all/#exposing","title":"Exposing","text":"<p><code>vim /etc/nginx/sites-available/ticker-api</code></p> <pre><code>server {\n    listen 80;\n    listen [::]:80;\n    server_name api.domain.tld;\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_pass http://127.0.0.1:8080;\n    }\n}\n\n</code></pre> <p>Create a symlink to enable this config: <code>ln -s /etc/nginx/sites-available/ticker-api /etc/nginx/sites-enabled/</code></p> <p>Now run <code>nginx -t</code> to check if the config is correct.</p> <p>If your output looks like this:</p> <pre><code>nginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n</code></pre> <p>then you can proceed. Otherwise: look for the error or ask someone to help.</p> <p>Run <code>certbot --nginx --redirect -d api.domain.tld</code> to get a free SSL certificate. Please keep in mind, that you need to point the <code>A</code> &amp; <code>AAAA</code> Records to your machine!</p> <p>If you don't want to use certbot for your installation, please keep in mind, that nontheless you'll need an TLS cert for running this in production and need to configure the nginx accordingly by yourself!</p> <p>It should generate a certificate after answering a few questions like a email address, etc.</p> <p>done. This domain is now serving a ticker API. :)</p>"},{"location":"quick-install-all/#install-ticker-admin","title":"Install ticker-admin","text":"<ol> <li><code>cd /var/www/</code> The directory where we gonna install all the things</li> <li><code>git clone https://github.com/systemli/ticker-admin</code> Clone the repository onto your disk</li> <li><code>cd ticker-admin</code> Go into the just cloned repository</li> <li><code>yarn</code> Install the dependencies</li> <li><code>vim .env</code> Fill your .env file with the following content:</li> </ol> <pre><code>REACT_APP_API_URL=https://api.domain.tld/v1\n</code></pre> <p>Change <code>api.domain.tld</code> to the URL you chose at ticker API server creation</p> <ol> <li><code>yarn build</code> Build the application</li> <li><code>chown www-data:www-data dist/ -R</code> Sets the owner for the freshly created dist repository to your nginx user</li> </ol>"},{"location":"quick-install-all/#exposing_1","title":"Exposing","text":"<p><code>vim /etc/nginx/sites-available/ticker-admin</code></p> <pre><code>server {\n    listen 80;\n    listen [::]:80;\n    server_name admin.domain.tld;\n    root /var/www/ticker-admin/dist;\n    index index.html;\n    location / {\n        try_files $uri $uri/ =404;\n    }\n}\n\n</code></pre> <p>Create a symlink to enable this config: <code>ln -s /etc/nginx/sites-available/ticker-admin /etc/nginx/sites-enabled/</code></p> <p>Now run <code>nginx -t</code> to check if the config is correct.</p> <p>If your output looks like this:</p> <pre><code>nginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n</code></pre> <p>then you can proceed. Otherwise: look for the error or ask someone to help.</p> <p>Run <code>certbot --nginx --redirect -d admin.domain.tld</code> to get a free SSL certificate. Please keep in mind, that you need to point the <code>A</code> &amp; <code>AAAA</code> Records to your machine!</p> <p>If you don't want to use certbot for your installation, please keep in mind, that nontheless you'll need an TLS cert for running this in production and need to configure the nginx accordingly by yourself!</p> <p>It should generate a certificate after answering a few questions like a email address, etc.</p> <p>done. This domain is now serving a ticker frontend. :)</p> <p>You need to create the ticker in ticker-admin in order to see something!</p>"},{"location":"quick-install-all/#install-ticker-frontend","title":"Install ticker-frontend","text":"<ol> <li><code>cd /var/www/</code> The directory where we gonna install all the things</li> <li><code>git clone https://github.com/systemli/ticker-frontend</code> Clone the repository onto your disk</li> <li><code>cd ticker-frontend</code> Go into the just cloned repository</li> <li><code>git checkout d03982f3059d6335a9e9ec0abcb71813ccbafef7</code> Checkout this branch. Hopefully, this won't be necessary in the future, but right now, this seems to be the the last working commit (for me)</li> <li><code>yarn</code> Install the dependencies</li> <li><code>vim .env</code> Fill your .env file with the following content:</li> </ol> <pre><code>REACT_APP_API_URL=https://api.domain.tld/v1\n</code></pre> <p>Change <code>api.domain.tld</code> to the URL you chose at ticker API server creation</p> <ol> <li><code>yarn build</code> Build the application</li> <li><code>chown www-data:www-data dist/ -R</code> Sets the owner for the freshly created dist repository to your nginx user</li> </ol>"},{"location":"quick-install-all/#exposing_2","title":"Exposing","text":"<p><code>vim /etc/nginx/sites-available/ticker-frontend</code></p> <p>The following config is for a single domain only! For wildcard configs, just replace the <code>sub.domain.tld</code> with a <code>*.domain.tld</code>. You need to validate your domain via DNS challenge or use another provider then Let's Encrypt!</p> <pre><code>server {\n    listen 80;\n    listen [::]:80;\n    server_name sub.domain.tld;\n    root /var/www/ticker-frontend/dist;\n    index index.html;\n    location / {\n        try_files $uri $uri/ =404;\n    }\n}\n\n</code></pre> <p>Create a symlink to enable this config: <code>ln -s /etc/nginx/sites-available/ticker-frontend /etc/nginx/sites-enabled/</code></p> <p>Now run <code>nginx -t</code> to check if the config is correct.</p> <p>If your output looks like this:</p> <pre><code>nginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n</code></pre> <p>then you can proceed. Otherwise: look for the error or ask someone to help.</p> <p>Run <code>certbot --nginx --redirect -d sub.domain.tld</code> to get a free SSL certificate. Please keep in mind, that you need to point the <code>A</code> &amp; <code>AAAA</code> Records to your machine!</p> <p>If you don't want to use certbot for your installation, please keep in mind, that nontheless you'll need an TLS cert for running this in production and need to configure the nginx accordingly by yourself!</p> <p>It should generate a certificate after answering a few questions like a email address, etc.</p> <p>done. This domain is now serving a ticker frontend. :)</p> <p>You need to create the ticker in ticker-admin in order to see something!</p>"},{"location":"quick-install-all/#first-touch","title":"First touch","text":"<ul> <li>Go to <code>https://admin.domain.tld</code> and log in with the credentials provided at your first start of the ticker api.</li> <li>Change the provided credentials (and use a password manager)</li> <li>Create a new ticker for with the domain <code>sub.domain.tld</code></li> <li>Create test content</li> <li>Try to open <code>https://sub.domain.tld</code></li> <li>...</li> <li>profit?</li> </ul>"},{"location":"quick-install/","title":"Installation","text":"<p>This is tested under Ubuntu 20.04 LTS</p> <p>We're assuming, that the ticker api will be available under the <code>api.domain.tld</code> domain. Please change accordingly.</p> <p>This should be considered a QUICK INSTALL GUIDE! Some best practices may differ.</p>"},{"location":"quick-install/#requirements","title":"Requirements","text":"<ul> <li><code>nginx</code></li> <li>certificate (<code>certbot</code> &amp; <code>python3-certbot-nginx</code> to use free Let's Encrypt Certs)</li> <li><code>git</code></li> <li><code>go</code></li> <li>Public IPv4</li> <li>Public IPv6 (Please!)</li> </ul>"},{"location":"quick-install/#getting-go","title":"Getting Go","text":"<p>Don't use the shipped version of your system, if you're working on a Debian based OS (Ubuntu, etc)</p> <p>Instead use:  golang.org install guide</p> <p>Please be also aware, that it's best practice to build your version of \"ticker\" not on the production machine. In order to keep the hurdle as low as possible, we will build the app on the system we're going to run it. To enhance security maybe you want to remove <code>go</code> afterwards.</p>"},{"location":"quick-install/#installation_1","title":"Installation","text":""},{"location":"quick-install/#build-from-source","title":"Build from source","text":"<p>As mentioned above, this isn't best practice. You can also build it from source on your dedicated build server, your own pc at home, etc. Then just scp it over to the production Server afterwards.</p> <ol> <li><code>cd /var/www/</code> The directory where we gonna install all the things</li> <li><code>git clone https://github.com/systemli/ticker</code> Clone the repository onto your disk</li> <li><code>cd ticker</code> Go into the just cloned repository</li> <li><code>go build -o build/ticker</code> Build the application</li> <li>Go to \"Configuration, Service and Stuff\"</li> </ol>"},{"location":"quick-install/#downloading-a-release-from-github","title":"Downloading a release from GitHub","text":"<ol> <li>Go to https://github.com/systemli/ticker/releases</li> <li>Pick the latest release and download it via <code>wget https://github.com/systemli/ticker/releases/download/&lt;version&gt;/ticker-&lt;version&gt;-&lt;architecture&gt;</code></li> <li><code>mv ticker-&lt;version&gt;-&lt;architecture&gt; /var/www/ticker/ticker</code></li> <li><code>chmod +x /var/www/ticker/ticker</code></li> <li>Go to \"Configuration, Service and Stuff\"</li> </ol>"},{"location":"quick-install/#configuration-service-and-stuff","title":"Configuration, Service and Stuff","text":"<ol> <li><code>vim config.yml</code> Fill your config file with the following content:</li> </ol> <pre><code># listen binds ticker to specific address and port\nlisten: \"localhost:8080\"\n# log_level sets log level for logrus\nlog_level: \"error\"\n# configuration for the database\ndatabase:\n    type: \"sqlite\" # postgres, mysql, sqlite\n    dsn: \"ticker.db\" # postgres: \"host=localhost port=5432 user=ticker dbname=ticker password=ticker sslmode=disable\"\n# secret used for JSON Web Tokens\nsecret: \"&lt;your special little secret&gt; (make it LOOOONG!)\"\n# listen port for prometheus metrics exporter\nmetrics_listen: \":8181\"\nupload:\n    # path where to store the uploaded files\n    path: \"uploads\"\n    # base url for uploaded assets\n    url: \"https://api.domain.tld\"\n</code></pre> <ol> <li>Create a systemd Task (see docs/ticker-api.service for reference)</li> <li><code>systemctl enable ticker-api.service</code></li> <li><code>systemctl start ticker-api.service</code></li> <li>If you enter <code>systemctl status ticker-api.service</code> you'll see the generated admin password. Please change it immediately!</li> <li>Done. \\o/ You now have a fully functional ticker API.</li> </ol>"},{"location":"quick-install/#exposing","title":"Exposing","text":"<p>In order to expose your ticker API to the users and not only yourself on the server, you'll need some sort of reverse proxy. The following config expects you to use nginx, but apache2, caddy, etc. works just fine too.</p> <p><code>vim /etc/nginx/sites-available/ticker-api</code></p> <p>This config is only for use with <code>cerbot</code>! Please create a secure SSL config if you won't let certbot do the job!</p> <pre><code>server {\n    listen 80;\n    listen [::]:80;\n    server_name api.domain.tld;\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_pass http://127.0.0.1:8080;\n    }\n}\n\n</code></pre> <p>This is an example config for using TLS/SSL without certbot:</p> <pre><code>server {\n    server_name api.domain.tld;\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_pass http://127.0.0.1:8080;\n    }\n\n    listen [::]:443 ssl ipv6only=on;\n    listen 443 ssl;\n    ssl_certificate /etc/ssl/api.domain.tld-fullchain.pem;\n    ssl_certificate_key /etc/ssl/api.domain.tld-privkey.pem;\n    ssl_session_cache shared:le_nginx_SSL:10m;\n    ssl_session_timeout 1440m;\n    ssl_session_tickets off;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers off;\n\n    ssl_ciphers \"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA\";\n\n}\n\n\nserver {\n    return 301 https://$host$request_uri;\n\n    listen 80;\n    listen [::]:80;\n    server_name api.domain.tld;\n\n}\n\n</code></pre> <p>Create a symlink to enable this config: <code>ln -s /etc/nginx/sites-available/ticker-api /etc/nginx/sites-enabled/</code></p> <p>Now run <code>nginx -t</code> to check if the config is correct.</p> <p>If your output looks like this:</p> <pre><code>nginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n</code></pre> <p>then you can proceed. Otherwise: look for the error or ask someone to help.</p> <p>Run <code>certbot --nginx --redirect -d api.domain.tld</code> to get a free SSL certificate. Please keep in mind, that you need to point the <code>A</code> &amp; <code>AAAA</code> Records to your machine!</p> <p>It should generate a certificate after answering a few questions like a email address, etc.</p> <p>done. This domain is now serving a ticker API. :)</p>"}]}